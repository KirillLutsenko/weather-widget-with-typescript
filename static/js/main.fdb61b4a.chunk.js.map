{"version":3,"sources":["bus/weather/types.ts","bus/weather/reducer.ts","bus/client/activeDay/types.ts","bus/client/activeDay/reducer.ts","init/rootReducer.ts","init/middleware.js","init/store.ts","bus/weather/api/index.ts","bus/weather/api/config.ts","bus/weather/actions.ts","bus/weather/index.ts","view/pages/FilterBlock/TemperatureInputs/TemperatureInputs.tsx","view/pages/FilterBlock/TypeOfWeather.js/TypeOfWeather.tsx","view/pages/FilterBlock/FilterBlock.tsx","bus/client/activeDay/actions.ts","bus/client/activeDay/index.ts","view/pages/HeadBlock/HeadBlock.tsx","view/pages/CurrentWeather/CurrentWeather.tsx","view/pages/Forecast/Forecast.tsx","view/pages/Weather.tsx","index.tsx"],"names":["WEATHER_START_FETCHING","WEATHER_STOP_FETCHING","WEATHER_FILL","WEATHER_SET_FETCHING_ERROR","WEATHER_SET_MIN_TEMPERATURE","WEATHER_SET_MAX_TEMPERATURE","WEATHER_SET_TYPE_OF_WEATHER","WEATHER_SET_MINTEMPVALID_ERROR","WEATHER_SET_MAXTEMPVALID_ERROR","WEATHER_SET_STATUS_OF_FILTER","initialState","data","isFetching","error","weatherType","minTemperature","maxTemperature","minTempValidError","maxTempValidError","filterStatus","types","Object","freeze","WEATHER_SET_ACTIVE_DAY","activeId","rootReducer","combineReducers","weather","state","action","type","payload","weatherDayId","devtools","createLogger","duration","collapsed","colors","title","prevState","nextState","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","console","log","composeEnhancers","compose","middleware","thunk","store","createStore","applyMiddleware","api","fetch","method","forecastActions","startFetching","stopFetching","fill","setFetchingError","fetchAsync","dispatch","a","response","status","json","setMinTemperature","setMaxTemperature","setTypeOfWeather","setMinTempValidationError","setMaxTempValidationError","setFilterStatus","useForecast","useDispatch","useSelector","useEffect","filterWeather","filteredData","filter","day","temperature","Number","minTemperatureChange","value","numberValidation","replace","maxTemperatureChange","setWeatherType","resetFilters","TemperatureInputs","className","htmlFor","id","maxLength","onChange","event","target","onClick","classNames","require","TypeOfWeather","name","checked","FilterBlock","weatherDayIdActions","setUserId","useWeatherDayId","dayId","useDayId","moment","HeadBlock","length","format","CurrentWeather","getTemperature","rain_probability","humidity","getHumidity","Forecast","HandleDay","index","slice","map","obj","onKeyDown","tabIndex","role","Weather","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fdb61b4a.chunk.js","sourcesContent":["// fetching\nexport const WEATHER_START_FETCHING = 'WEATHER_START_FETCHING';\nexport const WEATHER_STOP_FETCHING = 'WEATHER_STOP_FETCHING';\nexport const WEATHER_FILL = 'WEATHER_FILL';\nexport const WEATHER_SET_FETCHING_ERROR = 'WEATHER_SET_FETCHING_ERROR';\n\n// async\nexport const WEATHER_FETCH_ASYNC = 'WEATHER_FETCH_ASYNC';\n\n// filtration\nexport const WEATHER_SET_MIN_TEMPERATURE = 'WEATHER_SET_MIN_TEMPERATURE';\nexport const WEATHER_SET_MAX_TEMPERATURE = 'WEATHER_SET_MAX_TEMPERATURE';\nexport const WEATHER_SET_TYPE_OF_WEATHER = 'WEATHER_SET_TYPE_OF_WEATHER';\nexport const WEATHER_SET_MINTEMPVALID_ERROR = 'WEATHER_SET_MINTEMPVALID_ERROR';\nexport const WEATHER_SET_MAXTEMPVALID_ERROR = 'WEATHER_SET_MAXTEMPVALID_ERROR';\nexport const WEATHER_SET_STATUS_OF_FILTER = 'WEATHER_SET_STATUS_OF_FILTER';\n\n\n// Typescripts Types\n\n// ---------------------Reducer Types----------------------------\nexport type dataType = {\n  day: number;\n  humidity: number;\n  readonly id: string;\n  rain_probability: number;\n  temperature: number;\n  type: string;\n};\n\nexport type initialStateType = {\n  data: dataType[] | [];\n  isFetching: boolean;\n  error: boolean | number | null;\n  weatherType: string;\n  minTemperature: string;\n  maxTemperature: string;\n  minTempValidError: boolean;\n  maxTempValidError: boolean;\n  filterStatus: boolean;\n}\n\n\n// ---------------------Actions Types----------------------------\n\nexport type actionTypeObjType = {\n  type: string;\n  payload?: any;\n  error?: any; \n}\n\ntype actionObjType = {\n  type: string;\n}\n\ntype fillActionObjType = actionObjType & {\n  payload: dataType[] | null;\n}\n\ntype errorType = {\n  status: boolean | number | null;\n}\n\ntype fetchingErrorObjType = actionObjType & {\n  error: errorType;\n  payload: errorType;\n}\n\ntype minMaxTemperatureObjType = actionObjType & {\n  payload: string;\n}\n\ntype typeOfWeatherObjType = actionObjType & {\n  payload: string;\n}\n\ntype minMaxTempValidationErrorObjType = actionObjType & {\n  payload: boolean;\n}\n\ntype filterStatusObjType = actionObjType & {\n  payload: boolean;\n}\n\n// Types of methods in the Action object\n\ntype startFetchingType = () => actionObjType;\ntype stopFetchingType = () => actionObjType;\ntype fillType = (payload: dataType[] | null) => fillActionObjType;\ntype fetchingErrorType = (error: errorType) => fetchingErrorObjType;\ntype fetchAsyncType = () => void;\ntype setTemperatureType = (payload: string) => minMaxTemperatureObjType;\ntype setTypeOfWeatherType = (payload: string) => typeOfWeatherObjType;\ntype setminMaxTempValidationError = (payload: boolean) => minMaxTempValidationErrorObjType;\ntype setFilterStatusType = (payload: boolean) => filterStatusObjType;\n\nexport type forecastActionsType = {\n  startFetching: startFetchingType;\n  stopFetching: stopFetchingType;\n  fill: fillType;\n  setFetchingError: fetchingErrorType;\n  fetchAsync: fetchAsyncType;\n  setMinTemperature: setTemperatureType;\n  setMaxTemperature: setTemperatureType;\n  setTypeOfWeather: setTypeOfWeatherType;\n  setMinTempValidationError: setminMaxTempValidationError;\n  setMaxTempValidationError: setminMaxTempValidationError;\n  setFilterStatus: setFilterStatusType;\n}\n\n\n// ---------------------Store Types-------------------------------\n\ntype weatherDayIdType = {\n  activeId: number;\n}\n\nexport type stateType = {\n  weather: initialStateType;\n  weatherDayId: weatherDayIdType;\n}","import {\n  WEATHER_START_FETCHING,\n  WEATHER_STOP_FETCHING,\n  WEATHER_FILL,\n  WEATHER_SET_FETCHING_ERROR,\n  WEATHER_SET_MIN_TEMPERATURE,\n  WEATHER_SET_MAX_TEMPERATURE,\n  WEATHER_SET_TYPE_OF_WEATHER,\n  WEATHER_SET_MINTEMPVALID_ERROR,\n  WEATHER_SET_MAXTEMPVALID_ERROR,\n  WEATHER_SET_STATUS_OF_FILTER,\n  actionTypeObjType,\n  initialStateType,\n} from './types';\n\n\nconst initialState: initialStateType = {\n  data: [],\n  isFetching: false,\n  error: null,\n  weatherType: 'sunny',\n  minTemperature: '',\n  maxTemperature: '',\n  minTempValidError: false,\n  maxTempValidError: false,\n  filterStatus: false,\n};\n\nexport const forecastReducer = (state = initialState, action: actionTypeObjType) => {\n  switch (action.type) {\n    case WEATHER_START_FETCHING:\n      return {\n        ...state,\n        isFetching: true,\n      };\n\n    case WEATHER_STOP_FETCHING:\n      return {\n        ...state,\n        isFetching: false,\n      };\n\n    case WEATHER_SET_FETCHING_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        data: null,\n      };\n\n    case WEATHER_FILL:\n      return {\n        ...state,\n        data: action.payload,\n        error: null,\n      };\n\n    case WEATHER_SET_TYPE_OF_WEATHER:\n      return {\n        ...state,\n        weatherType: action.payload,\n      };\n\n    case WEATHER_SET_MIN_TEMPERATURE:\n      return {\n        ...state,\n        minTemperature: action.payload,\n      };\n\n    case WEATHER_SET_MAX_TEMPERATURE:\n      return {\n        ...state,\n        maxTemperature: action.payload,\n      };\n\n    case WEATHER_SET_MINTEMPVALID_ERROR:\n      return {\n        ...state,\n        minTempValidError: action.payload,\n      };\n\n    case WEATHER_SET_MAXTEMPVALID_ERROR:\n      return {\n        ...state,\n        maxTempValidError: action.payload,\n      };\n\n    case WEATHER_SET_STATUS_OF_FILTER:\n      return {\n        ...state,\n        filterStatus: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","export const types = Object.freeze({\n  WEATHER_SET_ACTIVE_DAY: 'WEATHER_SET_ACTIVE_DAY',\n});\n\n// Typescript types\n\n// --------------Action types--------------------\n\ntype userIdObj = {\n  type: string;\n  payload: number;\n}\n\ntype setUserIdType = (payload: number) => userIdObj;\n\nexport type weatherDayIdActionsType = {\n  setUserId: setUserIdType;\n}\n\n// -------------Reducer types--------------------\n\nexport type initialStateType = {\n  activeId: Number;\n}\n\nexport type actionTypeObj = {\n  type: string;\n  payload: number;\n}\n\n// ---------------------Store Types-------------------------------\n\ntype weatherDayIdType = {\n  activeId: number;\n}\n\nexport type stateType = {\n  weather: initialStateType;\n  weatherDayId: weatherDayIdType;\n}","import { actionTypeObj, initialStateType, types } from './types';\n\nconst initialState: initialStateType = {\n  activeId: 0,\n};\n\nexport const clientReducer = (state = initialState, action: actionTypeObj) => {\n  switch (action.type) {\n    case types.WEATHER_SET_ACTIVE_DAY:\n      return {\n        activeId: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\n\n// делаем алиас чтобы в дальнейшем его использовать\nimport {\n  forecastReducer as weather,\n} from '../bus/weather/reducer';\n\nimport {\n  clientReducer as weatherDayId,\n} from '../bus/client/activeDay/reducer';\n\nexport const rootReducer = combineReducers({ // большой обьект состояния\n  weather,\n  weatherDayId,\n});\n","import { compose } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\n\n// функция которая вызывается и получает в себя обьект параметров\nexport const logger = createLogger({\n  duration: true,\n  collapsed: true,\n  colors: { // настройка нашего логгера\n    title: action => (action.error ? 'firebrick' : 'deepskyblue'),\n    prevState: () => '#1C5FAF',\n    action: () => '#149945',\n    nextState: () => '#A47104',\n    error: () => '#FF0005',\n  },\n});\n\n\nconst developmentEnvironment = process.env.NODE_ENV === 'development';\n\nconst devtools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n\nconsole.log(devtools);\n\nconst composeEnhancers = developmentEnvironment\n  && devtools\n  ? devtools\n  : compose;\n\nconst middleware = [thunk];\n\n// если у нас режим разработки добавляем в массив logger\nif (developmentEnvironment) {\n  middleware.push(logger);\n}\n\nexport { composeEnhancers, middleware };\n","// Core\nimport { createStore, applyMiddleware } from 'redux';\n\n// Tools\nimport { rootReducer } from './rootReducer';\nimport { composeEnhancers, middleware } from './middleware';\n\nexport const store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(...middleware)),\n);\n","import { weatherApi } from './config';\n\nexport const api = Object.freeze({\n  weather: {\n    fetch: () => fetch(`${weatherApi}/forecast`, {\n      method: 'GET',\n    }),\n  },\n});\n","export const weatherApi = 'https://lab.lectrum.io/rtx/api/';\n","// Api\nimport { api } from './api';\n\nimport {\n  WEATHER_START_FETCHING,\n  WEATHER_STOP_FETCHING,\n  WEATHER_FILL,\n  WEATHER_SET_FETCHING_ERROR,\n  WEATHER_SET_MIN_TEMPERATURE,\n  WEATHER_SET_MAX_TEMPERATURE,\n  WEATHER_SET_TYPE_OF_WEATHER,\n  WEATHER_SET_MAXTEMPVALID_ERROR,\n  WEATHER_SET_MINTEMPVALID_ERROR,\n  WEATHER_SET_STATUS_OF_FILTER,\n  actionTypeObjType,\n  forecastActionsType,\n} from './types';\n\n// Return Objects types in Actions\n\n\n\nexport const forecastActions: forecastActionsType = ({\n  // fetch actions\n  startFetching: () => ({\n    type: WEATHER_START_FETCHING,\n  }),\n\n  stopFetching: () => ({\n    type: WEATHER_STOP_FETCHING,\n  }),\n\n  fill: payload => ({\n    type: WEATHER_FILL,\n    payload,\n  }),\n\n  setFetchingError: error => ({\n    type: WEATHER_SET_FETCHING_ERROR,\n    error,\n    payload: error,\n  }),\n\n  fetchAsync: () => async(dispatch: (action: actionTypeObjType) => void) => {\n    dispatch(forecastActions.startFetching());\n\n    const response = await api.weather.fetch();\n\n    if (response.status === 200) { \n      const { data } = await response.json();\n\n      dispatch(forecastActions.fill(data));\n    } else {\n      const error = {\n        status: response.status,\n      };\n\n      dispatch(forecastActions.setFetchingError(error));\n    }\n\n    dispatch(forecastActions.stopFetching());\n  },\n\n  // filter actions\n  setMinTemperature: payload => ({\n    type: WEATHER_SET_MIN_TEMPERATURE,\n    payload,\n  }),\n\n  setMaxTemperature: payload => ({\n    type: WEATHER_SET_MAX_TEMPERATURE,\n    payload,\n  }),\n\n  setTypeOfWeather: payload => ({\n    type: WEATHER_SET_TYPE_OF_WEATHER,\n    payload,\n  }),\n\n  setMinTempValidationError: payload => ({\n    type: WEATHER_SET_MINTEMPVALID_ERROR,\n    payload,\n  }),\n\n  setMaxTempValidationError: payload => ({\n    type: WEATHER_SET_MAXTEMPVALID_ERROR,\n    payload,\n  }),\n\n  setFilterStatus: payload => ({\n    type: WEATHER_SET_STATUS_OF_FILTER,\n    payload,\n  }),\n});\n","// core\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { stateType } from './types';\n\n// actions\nimport { forecastActions } from './actions';\n\n// types & reducers\nexport * from './types';\nexport * from './reducer';\n\n\nexport const useForecast = () => {\n  const dispatch = useDispatch();\n  const {\n    data,\n    isFetching,\n    error,\n    minTemperature,\n    maxTemperature,\n    weatherType,\n    minTempValidError,\n    maxTempValidError,\n    filterStatus,\n  } = useSelector((state: stateType) => state.weather);\n\n  useEffect(() => {\n    dispatch(forecastActions.fetchAsync());\n  }, [dispatch]);\n\n  const minTemperatureChange = (value: string) => {\n    const numberValidation = value.replace(/[^\\d.]/g, '');\n\n    dispatch(forecastActions.setMinTempValidationError(false));\n    dispatch(forecastActions.setMinTemperature(numberValidation));\n  };\n\n  const maxTemperatureChange = (value: string) => {\n    const numberValidation = value.replace(/[^\\d.]/g, '');\n\n    dispatch(forecastActions.setMaxTempValidationError(false));\n    dispatch(forecastActions.setMaxTemperature(numberValidation));\n  };\n\n  const setWeatherType = (type: string) => dispatch(\n    forecastActions.setTypeOfWeather(type),\n  );\n\n  const filterWeather = async() => {\n    if (minTemperature === '' && maxTemperature === '') {\n      dispatch(forecastActions.setMinTempValidationError(true));\n      dispatch(forecastActions.setMaxTempValidationError(true));\n    } else if (minTemperature === '') {\n      dispatch(forecastActions.setMinTempValidationError(true));\n    } else if (maxTemperature === '') {\n      dispatch(forecastActions.setMaxTempValidationError(true));\n    } else {\n      await dispatch(forecastActions.fetchAsync());\n\n      const filteredData = !(data === null)\n        ? data.filter(day => day.type === weatherType\n          && day.temperature >= Number(minTemperature)\n          && day.temperature <= Number(maxTemperature))\n        : null\n\n      dispatch(forecastActions.fill(filteredData));\n      dispatch(forecastActions.setFilterStatus(true));\n    }\n  };\n\n  const resetFilters = () => {\n    dispatch(forecastActions.fetchAsync());\n\n    dispatch(forecastActions.setMinTemperature(''));\n    dispatch(forecastActions.setMaxTemperature(''));\n    dispatch(forecastActions.setTypeOfWeather('sunny'));\n\n    dispatch(forecastActions.setFilterStatus(false));\n  };\n\n  return {\n    data,\n    isFetching,\n    error,\n    minTemperature,\n    maxTemperature,\n    weatherType,\n    minTempValidError,\n    maxTempValidError,\n    filterStatus,\n    minTemperatureChange,\n    maxTemperatureChange,\n    setWeatherType,\n    filterWeather,\n    resetFilters,\n  };\n};\n","// Core\nimport React from 'react';\n\n// Components\nimport { useForecast } from '../../../../bus/weather';\n\n// Styles\nimport './TemperatureInputs.css';\n\nexport const TemperatureInputs = () => {\n  const {\n    minTemperature,\n    maxTemperature,\n    minTempValidError,\n    maxTempValidError,\n    filterStatus,\n    filterWeather,\n    minTemperatureChange,\n    maxTemperatureChange,\n    resetFilters,\n  } = useForecast();\n\n  return (\n    <div className=\"filter-inputs\">\n      <div className=\"custom-input\">\n        <label htmlFor=\"min-temperature\">Minimum temperature</label>\n        <input\n          id=\"min-temperature\"\n          type=\"text\"\n          maxLength={2}\n          value={minTemperature}\n          onChange={(event) => minTemperatureChange(event.target.value)}\n        />\n        {minTempValidError && (\n          <p className=\"validation-error\">\n            Enter temperature\n          </p>\n        )}\n      </div>\n      <div className=\"custom-input\">\n        <label htmlFor=\"min-temperature\">Maximum temperature</label>\n        <input\n          id=\"max-temperature\"\n          type=\"text\"\n          maxLength={2}\n          value={maxTemperature}\n          onChange={(event) => maxTemperatureChange(event.target.value)}\n        />\n        {maxTempValidError && (\n          <p className=\"validation-error\">\n            Enter temperature\n          </p>\n        )}\n      </div>\n      {!filterStatus ? (\n        <button\n          type=\"button\"\n          onClick={filterWeather}\n          className=\"button\"\n        >\n          Filter\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          onClick={resetFilters}\n          className=\"button\"\n        >\n          Reset filters\n        </button>\n      )}\n    </div>\n  );\n};\n","// Core\nimport React from 'react';\n\n// Hooks\nimport { useForecast } from '../../../../bus/weather';\n\n// Styles\nimport './TypeOfWeather.css';\n\nconst classNames = require('classnames');\n\nexport const TypeOfWeather = () => {\n  const { weatherType, setWeatherType } = useForecast();\n\n  return (\n    <div className=\"filter-labels\">\n      <label className=\"filter__label\" htmlFor=\"cloudy\">\n        <span\n          className={classNames(\n            'checkbox', {\n              'checkbox checkbox-selected': weatherType === 'cloudy',\n            },\n          )}\n        >\n          Cloudy\n        </span>\n        <input\n          type=\"radio\"\n          id=\"cloudy\"\n          name=\"filter\"\n          className=\"radio-checkbox\"\n          onChange={() => setWeatherType('cloudy')}\n          checked={weatherType === 'cloudy'}\n        />\n      </label>\n      <label className=\"filter__label\" htmlFor=\"sunny\">\n        <span className={classNames(\n          'checkbox', {\n            'checkbox checkbox-selected': weatherType === 'sunny',\n          },\n        )}\n        >\n          Sunny\n        </span>\n        <input\n          type=\"radio\"\n          id=\"sunny\"\n          name=\"filter\"\n          className=\"radio-checkbox\"\n          onChange={() => setWeatherType('sunny')}\n          checked={weatherType === 'sunny'}\n        />\n      </label>\n      <label className=\"filter__label\" htmlFor=\"rainy\">\n        <span\n          className={classNames(\n            'checkbox', {\n              'checkbox checkbox-selected': weatherType === 'rainy',\n            },\n          )}\n        >\n          Rainy\n        </span>\n        <input\n          type=\"radio\"\n          id=\"rainy\"\n          name=\"filter\"\n          className=\"radio-checkbox\"\n          onChange={() => setWeatherType('rainy')}\n          checked={weatherType === 'rainy'}\n        />\n      </label>\n    </div>\n  );\n};\n","// Core\nimport React from 'react';\n\n// Components\nimport { TemperatureInputs } from './TemperatureInputs';\nimport { TypeOfWeather } from './TypeOfWeather.js/TypeOfWeather';\n\n// Styles\nimport './FilterBlock.css';\n\nexport const FilterBlock = () => (\n  <div className=\"filter\">\n    <TypeOfWeather />\n    <TemperatureInputs />\n  </div>\n);\n","import { types, weatherDayIdActionsType } from './types';\n\nexport const weatherDayIdActions: weatherDayIdActionsType = Object.freeze({\n  setUserId: payload => ({\n    type: types.WEATHER_SET_ACTIVE_DAY,\n    payload,\n  }),\n});\n","// core\nimport { useDispatch, useSelector } from 'react-redux';\nimport { stateType } from './types';\n\n// actions\nimport { weatherDayIdActions } from './actions';\n\n// types & reducers\nexport * from './types';\nexport * from './reducer';\n\nexport const useWeatherDayId = () => {\n  const dispatch = useDispatch();\n  const useDayId = (id: number) => dispatch(weatherDayIdActions.setUserId(id));\n\n  const dayId = useSelector((state: stateType) => state.weatherDayId.activeId);\n\n  return {\n    dayId,\n    useDayId,\n  };\n};\n","// Core\nimport React from 'react';\n\n// Components\nimport { useForecast } from '../../../bus/weather';\nimport { useWeatherDayId } from '../../../bus/client/activeDay';\n\n// Styles\nimport './HeadBlock.css';\n\nconst classNames = require('classnames');\nconst moment = require('moment');\n\nexport const HeadBlock = () => {\n  const { data, isFetching } = useForecast();\n  const { dayId } = useWeatherDayId();\n\n  const getDayOfWeek = () => data\n    && data.length\n    && moment(data[dayId].day).format('dddd');\n\n  const getDate = () => data\n    && data.length\n    && moment(data[dayId].day).format('MMMM do');\n\n  return (\n    <div className=\"head\">\n      <div\n        className={data\n          && data.length\n          && classNames(\n            'icon', {\n              'icon sunny': data && data.length && data[dayId].type === 'sunny',\n              'icon cloudy': data && data.length && data[dayId].type === 'cloudy',\n              'icon rainy': data &&  data.length && data[dayId].type === 'rainy',\n            },\n          )\n          }\n      />\n      <div className=\"current-date\">\n        <p>\n          {!isFetching && getDayOfWeek()}\n        </p>\n        <span>\n          {!isFetching && getDate()\n          }\n        </span>\n      </div>\n    </div>\n  );\n};\n","// Core\nimport React, { FC, DetailedHTMLProps } from 'react';\n\n// Components\nimport { useForecast } from '../../../bus/weather';\nimport { useWeatherDayId } from '../../../bus/client/activeDay';\n\n// Styles\nimport './CurrentWeather.css';\n\n// Types\nimport { getHumidityType, getRainProbabilityType, getTemperatureType } from '../pagesTypes';\n\ninterface CurrentWeatherProps extends \n  DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n  HTMLTextAreaElement> {\n    getTemperature: getTemperatureType;\n}\n\nexport const CurrentWeather: FC<CurrentWeatherProps> = ({ getTemperature }) => {\n  const { data, isFetching } = useForecast();\n  const { dayId } = useWeatherDayId();\n\n  const getRainProbability: getRainProbabilityType = id => data\n    && data.length\n    && data[id].rain_probability;\n\n  const getHumidity: getHumidityType = id => data\n    && data.length\n    && data[id].humidity;\n\n  return (\n    <div className=\"current-weather\">\n      <p className=\"temperature\">\n        {!isFetching && getTemperature(dayId)\n        }\n      </p>\n      <p className=\"meta\">\n        <span className=\"rainy\">\n          {`%${!isFetching && getRainProbability(dayId)}`}\n        </span>\n        <span className=\"humidity\">\n          {`%${!isFetching && getHumidity(dayId)}`}\n        </span>\n      </p>\n    </div>\n  );\n};\n","// Core\nimport React, { FC, DetailedHTMLProps } from 'react';\nimport PropTypes from 'prop-types';\n\n// Components\nimport { useWeatherDayId } from '../../../bus/client';\nimport { useForecast } from '../../../bus/weather';\n\n// Styles\nimport './Forecast.css';\n\n// Tpes\nimport { getTemperatureType, handleDayType } from '../pagesTypes';\n\nconst classNames = require('classnames');\nconst moment = require('moment');\n\ninterface ForecastWeatherProps extends \n  DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n  HTMLTextAreaElement> {\n  getTemperature: getTemperatureType;\n}\n\nexport const Forecast: FC<ForecastWeatherProps> = ({ getTemperature }) => {\n  const { dayId, useDayId } = useWeatherDayId();\n  const { isFetching, data } = useForecast();\n\n  const HandleDay: handleDayType = (index) => useDayId(index);\n\n  return (\n    <div className=\"forecast\">\n      {!isFetching\n        && data\n        && data.length\n        && data\n          .slice(0, 7)\n          .map((obj, index) => (\n            <div\n              key={obj.id}\n              onClick={() => HandleDay(index)}\n              onKeyDown={() => HandleDay(index)}\n              tabIndex={0}\n              role=\"button\"\n              className={classNames(\n                'day', {\n                  'day selected': index === dayId,\n                  'day sunny': obj.type === 'sunny',\n                  'day cloudy': obj.type === 'cloudy',\n                  'day rainy': obj.type === 'rainy',\n                },\n              )\n              }\n            >\n              <p>\n                {moment(obj.day).format('dddd')}\n              </p>\n              <span>\n                {getTemperature(index)}\n              </span>\n            </div>\n          ))}\n    </div>\n  );\n};\n\nForecast.propTypes = {\n  getTemperature: PropTypes.func.isRequired,\n};\n","// Core\nimport React from 'react';\n\n// Components\nimport { useForecast } from '../../bus/weather';\nimport { FilterBlock } from './FilterBlock';\nimport { HeadBlock } from './HeadBlock/HeadBlock';\nimport { CurrentWeather } from './CurrentWeather/CurrentWeather';\nimport { Forecast } from './Forecast/Forecast';\n\n// Styles\nimport './Weather.css';\n\n// Types\nimport { getTemperatureType } from './pagesTypes';\n\nexport const Weather = () => {\n  const {\n    isFetching,\n    data,\n    error,\n    resetFilters,\n  } = useForecast();\n\n  if (error) {\n    return <p className=\"error\">Sorry, weather forecast is not found</p>;\n  }\n\n  if (error) {\n    return <p className=\"error\">Sorry, something went wrong</p>;\n  }\n\n  if (!isFetching && data && data.length === 0) {\n    return (\n      <div className=\"error\">\n        <p>By given criteria no days available</p>\n        <button\n          type=\"button\"\n          onClick={resetFilters}\n          className=\"reset-button\"\n        >\n          Reset filters\n        </button>\n      </div>\n    );\n  }\n\n  const getTemperature: getTemperatureType = id => data\n    && data.length\n    && data[id].temperature;\n\n  return (\n    <div className=\"weather-widget\">\n      {isFetching && (\n        <p className=\"error\">Loading data from api</p>\n      )}\n\n      <main className=\"weather-widget__main-block\">\n        <FilterBlock />\n        <HeadBlock />\n        <CurrentWeather getTemperature={getTemperature} />\n        <Forecast getTemperature={getTemperature} />\n      </main>\n    </div>\n  );\n};\n","// Core\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as ReduxProvider } from 'react-redux';\n\n// Init\nimport { store } from './init/store';\n\n// App\nimport { Weather } from './view/pages/Weather';\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n    <Weather />\n  </ReduxProvider>,\n  document.getElementById('root'),\n);\n\n"],"sourceRoot":""}